<?php
namespace Honvid\Thrift\Hbase;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * TCell - Used to transport a cell value (byte[]) and the timestamp it was
 * stored with together as a result for get and getRow methods. This promotes
 * the timestamp of a cell to a first-class value, making it easy to take
 * note of temporal data. Cell is used all the way from HStore up to HTable.
 */
class TCell extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'value',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'timestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $value = null;
  /**
   * @var int
   */
  public $timestamp = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCell';
  }

  public function read($input)
  {
    return $this->_read('TCell', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TCell', self::$_TSPEC, $output);
  }

}

/**
 * An HColumnDescriptor contains information about a column family
 * such as the number of versions, compression settings, etc. It is
 * used as input when creating a table or adding a column.
 */
class ColumnDescriptor extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'maxVersions',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'compression',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'inMemory',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'bloomFilterType',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'bloomFilterVectorSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'bloomFilterNbHashes',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'blockCacheEnabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'timeToLive',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $maxVersions = 3;
  /**
   * @var string
   */
  public $compression = "NONE";
  /**
   * @var bool
   */
  public $inMemory = false;
  /**
   * @var string
   */
  public $bloomFilterType = "NONE";
  /**
   * @var int
   */
  public $bloomFilterVectorSize = 0;
  /**
   * @var int
   */
  public $bloomFilterNbHashes = 0;
  /**
   * @var bool
   */
  public $blockCacheEnabled = false;
  /**
   * @var int
   */
  public $timeToLive = 2147483647;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnDescriptor';
  }

  public function read($input)
  {
    return $this->_read('ColumnDescriptor', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('ColumnDescriptor', self::$_TSPEC, $output);
  }

}

/**
 * A TRegionInfo contains information about an HTable region.
 */
class TRegionInfo extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::BYTE,
      ),
    6 => array(
      'var' => 'serverName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $startKey = null;
  /**
   * @var string
   */
  public $endKey = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var string
   */
  public $serverName = null;
  /**
   * @var int
   */
  public $port = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRegionInfo';
  }

  public function read($input)
  {
    return $this->_read('TRegionInfo', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TRegionInfo', self::$_TSPEC, $output);
  }

}

/**
 * A Mutation object is used to either update or delete a column-value.
 */
class Mutation extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'isDelete',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'column',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'value',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'writeToWAL',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $isDelete = false;
  /**
   * @var string
   */
  public $column = null;
  /**
   * @var string
   */
  public $value = null;
  /**
   * @var bool
   */
  public $writeToWAL = true;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mutation';
  }

  public function read($input)
  {
    return $this->_read('Mutation', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Mutation', self::$_TSPEC, $output);
  }

}

/**
 * A BatchMutation object is used to apply a number of Mutations to a single row.
 */
class BatchMutation extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'row',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'mutations',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Honvid\Thrift\Hbase\Mutation',
        ),
      ),
    );

  /**
   * @var string
   */
  public $row = null;
  /**
   * @var Mutation[]
   */
  public $mutations = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'BatchMutation';
  }

  public function read($input)
  {
    return $this->_read('BatchMutation', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('BatchMutation', self::$_TSPEC, $output);
  }

}

/**
 * For increments that are not incrementColumnValue
 * equivalents.
 */
class TIncrement extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'table',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'row',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'column',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'ammount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $table = null;
  /**
   * @var string
   */
  public $row = null;
  /**
   * @var string
   */
  public $column = null;
  /**
   * @var int
   */
  public $ammount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TIncrement';
  }

  public function read($input)
  {
    return $this->_read('TIncrement', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TIncrement', self::$_TSPEC, $output);
  }

}

/**
 * Holds column name and the cell.
 */
class TColumn extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'columnName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'cell',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Honvid\Thrift\Hbase\TCell',
      ),
    );

  /**
   * @var string
   */
  public $columnName = null;
  /**
   * @var TCell
   */
  public $cell = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TColumn';
  }

  public function read($input)
  {
    return $this->_read('TColumn', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TColumn', self::$_TSPEC, $output);
  }

}

/**
 * Holds row name and then a map of columns to cells.
 */
class TRowResult extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'row',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'columns',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\Honvid\Thrift\Hbase\TCell',
        ),
      ),
    3 => array(
      'var' => 'sortedColumns',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Honvid\Thrift\Hbase\TColumn',
        ),
      ),
    );

  /**
   * @var string
   */
  public $row = null;
  /**
   * @var array
   */
  public $columns = null;
  /**
   * @var TColumn[]
   */
  public $sortedColumns = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRowResult';
  }

  public function read($input)
  {
    return $this->_read('TRowResult', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TRowResult', self::$_TSPEC, $output);
  }

}

/**
 * A Scan object is used to specify scanner parameters when opening a scanner.
 */
class TScan extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startRow',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'stopRow',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'timestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'columns',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'caching',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'filterString',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'batchSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'sortColumns',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'reversed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'cacheBlocks',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $startRow = null;
  /**
   * @var string
   */
  public $stopRow = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string[]
   */
  public $columns = null;
  /**
   * @var int
   */
  public $caching = null;
  /**
   * @var string
   */
  public $filterString = null;
  /**
   * @var int
   */
  public $batchSize = null;
  /**
   * @var bool
   */
  public $sortColumns = null;
  /**
   * @var bool
   */
  public $reversed = null;
  /**
   * @var bool
   */
  public $cacheBlocks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TScan';
  }

  public function read($input)
  {
    return $this->_read('TScan', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TScan', self::$_TSPEC, $output);
  }

}

/**
 * An Append object is used to specify the parameters for performing the append operation.
 */
class TAppend extends TBase {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'table',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'row',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'columns',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'values',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $table = null;
  /**
   * @var string
   */
  public $row = null;
  /**
   * @var string[]
   */
  public $columns = null;
  /**
   * @var string[]
   */
  public $values = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TAppend';
  }

  public function read($input)
  {
    return $this->_read('TAppend', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TAppend', self::$_TSPEC, $output);
  }

}

/**
 * An IOError exception signals that an error occurred communicating
 * to the Hbase master or an Hbase region server.  Also used to return
 * more general Hbase error conditions.
 */
class IOError extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'IOError';
  }

  public function read($input)
  {
    return $this->_read('IOError', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('IOError', self::$_TSPEC, $output);
  }

}

/**
 * An IllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 */
class IllegalArgument extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'IllegalArgument';
  }

  public function read($input)
  {
    return $this->_read('IllegalArgument', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('IllegalArgument', self::$_TSPEC, $output);
  }

}

/**
 * An AlreadyExists exceptions signals that a table with the specified
 * name already exists
 */
class AlreadyExists extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AlreadyExists';
  }

  public function read($input)
  {
    return $this->_read('AlreadyExists', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('AlreadyExists', self::$_TSPEC, $output);
  }

}


